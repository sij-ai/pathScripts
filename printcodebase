#!/usr/bin/env python3

import os
import sys
from pathlib import Path

def is_binary(file_path):
    """
    Determines if a file is binary by checking its content.
    Returns True for binary files, False for text files.
    """
    try:
        with open(file_path, 'rb') as f:
            # Read the first 1024 bytes to check if it's binary
            chunk = f.read(1024)
            if b'\0' in chunk:
                return True
            return False
    except Exception:
        return True  # Treat unreadable files as binary for safety

def get_language_from_extension(file_path):
    """
    Maps file extensions to language identifiers for syntax highlighting.
    """
    ext = Path(file_path).suffix.lower()
    
    language_map = {
        '.py': 'python',
        '.js': 'javascript',
        '.jsx': 'jsx',
        '.ts': 'typescript',
        '.tsx': 'tsx',
        '.html': 'html',
        '.htm': 'html',
        '.css': 'css',
        '.scss': 'scss',
        '.sass': 'sass',
        '.less': 'less',
        '.json': 'json',
        '.xml': 'xml',
        '.yaml': 'yaml',
        '.yml': 'yaml',
        '.toml': 'toml',
        '.ini': 'ini',
        '.cfg': 'ini',
        '.conf': 'ini',
        '.sh': 'bash',
        '.bash': 'bash',
        '.zsh': 'zsh',
        '.fish': 'fish',
        '.ps1': 'powershell',
        '.bat': 'batch',
        '.cmd': 'batch',
        '.c': 'c',
        '.h': 'c',
        '.cpp': 'cpp',
        '.cc': 'cpp',
        '.cxx': 'cpp',
        '.hpp': 'cpp',
        '.java': 'java',
        '.kt': 'kotlin',
        '.scala': 'scala',
        '.go': 'go',
        '.rs': 'rust',
        '.rb': 'ruby',
        '.php': 'php',
        '.swift': 'swift',
        '.m': 'objective-c',
        '.r': 'r',
        '.R': 'r',
        '.sql': 'sql',
        '.md': 'markdown',
        '.markdown': 'markdown',
        '.tex': 'latex',
        '.vim': 'vim',
        '.lua': 'lua',
        '.pl': 'perl',
        '.pm': 'perl',
        '.tcl': 'tcl',
        '.dockerfile': 'dockerfile',
        '.makefile': 'makefile',
        '.mk': 'makefile',
        '.cmake': 'cmake',
        '.gradle': 'gradle',
        '.maven': 'xml',
        '.pom': 'xml',
        '.proto': 'protobuf',
        '.graphql': 'graphql',
        '.tf': 'terraform',
        '.hcl': 'hcl',
        '.nix': 'nix',
        '.clj': 'clojure',
        '.cljs': 'clojure',
        '.elm': 'elm',
        '.ex': 'elixir',
        '.exs': 'elixir',
        '.erl': 'erlang',
        '.hrl': 'erlang',
        '.fs': 'fsharp',
        '.fsx': 'fsharp',
        '.ml': 'ocaml',
        '.mli': 'ocaml',
        '.hs': 'haskell',
        '.lhs': 'haskell',
        '.dart': 'dart',
        '.jl': 'julia',
        '.nim': 'nim',
        '.cr': 'crystal',
        '.zig': 'zig',
        '.v': 'v',
        '.sv': 'systemverilog',
        '.vhd': 'vhdl',
        '.vhdl': 'vhdl',
        '.asm': 'assembly',
        '.s': 'assembly',
        '.S': 'assembly',
    }
    
    return language_map.get(ext, '')

def read_file_content(file_path):
    """
    Reads and returns the content of a file.
    """
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.read()
    except Exception as e:
        return f"Error reading file: {e}"

def should_skip_directory(dir_name):
    """
    Determines if a directory should be skipped.
    """
    # Skip hidden directories (starting with .)
    if dir_name.startswith('.'):
        return True
    
    # Skip common directories that should be ignored
    skip_dirs = {'__pycache__', 'node_modules', '.pytest_cache', '.mypy_cache', 
                 '.tox', '.venv', 'venv', '.env', 'env', 'build', 'dist', 
                 '.idea', '.vscode'}
    
    return dir_name in skip_dirs

def should_skip_file(file_name):
    """
    Determines if a file should be skipped.
    """
    # Skip hidden files (starting with .)
    if file_name.startswith('.'):
        return True
    
    # Skip common files that should be ignored
    skip_files = {'__pycache__', '.DS_Store', 'Thumbs.db', '.pyc', '.pyo', 
                  '.pyd', '.so', '.egg', '.egg-info'}
    
    return file_name in skip_files or any(file_name.endswith(ext) for ext in ['.pyc', '.pyo', '.pyd'])

def print_codebase(directory, extensions):
    """
    Recursively prints the contents of files with specified extensions.
    """
    directory_path = Path(directory).resolve()
    
    # Print top-level header with absolute path
    print(f"# {directory_path}\n")
    
    # Collect all matching files first, then sort them
    matching_files = []
    
    for root, dirs, files in os.walk(directory):
        # Filter out directories we want to skip
        # We modify dirs in-place to prevent os.walk from entering those directories
        dirs[:] = [d for d in dirs if not should_skip_directory(d)]
        
        for file_name in files:
            # Skip files we don't want to process
            if should_skip_file(file_name):
                continue
                
            file_path = Path(root) / file_name
            
            # Skip binary files
            if is_binary(file_path):
                continue
            
            # Check for extensions if provided
            if extensions:
                if not any(file_name.lower().endswith(ext.lower()) for ext in extensions):
                    continue
            
            # Calculate relative path from the starting directory
            try:
                relative_path = file_path.relative_to(directory_path)
                matching_files.append((file_path, relative_path))
            except ValueError:
                # Handle case where file_path is not relative to directory_path
                continue
    
    # Sort files by relative path for consistent output
    matching_files.sort(key=lambda x: str(x[1]))
    
    # Print each file
    for file_path, relative_path in matching_files:
        # Print subheader with relative path
        print(f"## ./{relative_path}\n")
        
        # Get language for syntax highlighting
        language = get_language_from_extension(file_path)
        
        # Read and print file content
        content = read_file_content(file_path)
        print(f"```{language}")
        print(content)
        print("```\n")

def main():
    # Get extensions from command-line arguments (empty list if no args)
    extensions = sys.argv[1:] if len(sys.argv) > 1 else []
    
    # Normalize extensions to ensure they start with a dot
    normalized_extensions = []
    for ext in extensions:
        if not ext.startswith('.'):
            ext = '.' + ext
        normalized_extensions.append(ext)
    
    # Get the current working directory
    current_dir = os.getcwd()
    
    # Print the codebase
    print_codebase(current_dir, normalized_extensions)

if __name__ == "__main__":
    main()
